
3_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000260  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000408  08000408  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000408  08000408  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08000408  08000408  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000408  08000408  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800040c  0800040c  0001040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0000001c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004d8  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000016f  00000000  00000000  0002051c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00020690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  000206f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018e1a  00000000  00000000  00020748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000007c2  00000000  00000000  00039562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b914  00000000  00000000  00039d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000c5638  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000f0  00000000  00000000  000c5688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000014 	.word	0x20000014
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080003f0 	.word	0x080003f0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000018 	.word	0x20000018
 80001e4:	080003f0 	.word	0x080003f0

080001e8 <main>:

uint8_t mess[20]= "Hello world\n";


int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<3);   //ENABLE clock for port D
 80001ee:	4b17      	ldr	r3, [pc, #92]	; (800024c <main+0x64>)
 80001f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f2:	4a16      	ldr	r2, [pc, #88]	; (800024c <main+0x64>)
 80001f4:	f043 0308 	orr.w	r3, r3, #8
 80001f8:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER |= (0x55<<24);  // Output for D12 ,D13, D14, D15
 80001fa:	4b15      	ldr	r3, [pc, #84]	; (8000250 <main+0x68>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a14      	ldr	r2, [pc, #80]	; (8000250 <main+0x68>)
 8000200:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000204:	6013      	str	r3, [r2, #0]
	GPIOD->ODR &=~ (0xF<<12);
 8000206:	4b12      	ldr	r3, [pc, #72]	; (8000250 <main+0x68>)
 8000208:	695b      	ldr	r3, [r3, #20]
 800020a:	4a11      	ldr	r2, [pc, #68]	; (8000250 <main+0x68>)
 800020c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000210:	6153      	str	r3, [r2, #20]
	//mess = "Hello world";
    /* Loop forever */
	UART2_Init();
 8000212:	f000 f823 	bl	800025c <UART2_Init>
	while(1){

		for(int i = 0; i <1000000; i++){}
 8000216:	2300      	movs	r3, #0
 8000218:	607b      	str	r3, [r7, #4]
 800021a:	e002      	b.n	8000222 <main+0x3a>
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	3301      	adds	r3, #1
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	4a0b      	ldr	r2, [pc, #44]	; (8000254 <main+0x6c>)
 8000226:	4293      	cmp	r3, r2
 8000228:	ddf8      	ble.n	800021c <main+0x34>
		UART_Transmit(mess,20);
 800022a:	2114      	movs	r1, #20
 800022c:	480a      	ldr	r0, [pc, #40]	; (8000258 <main+0x70>)
 800022e:	f000 f863 	bl	80002f8 <UART_Transmit>
		GPIOD->ODR ^=(1<<15);
 8000232:	4b07      	ldr	r3, [pc, #28]	; (8000250 <main+0x68>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a06      	ldr	r2, [pc, #24]	; (8000250 <main+0x68>)
 8000238:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 800023c:	6153      	str	r3, [r2, #20]
		GPIOD->ODR ^=(1<<12);
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <main+0x68>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	4a03      	ldr	r2, [pc, #12]	; (8000250 <main+0x68>)
 8000244:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000248:	6153      	str	r3, [r2, #20]
		for(int i = 0; i <1000000; i++){}
 800024a:	e7e4      	b.n	8000216 <main+0x2e>
 800024c:	40023800 	.word	0x40023800
 8000250:	40020c00 	.word	0x40020c00
 8000254:	000f423f 	.word	0x000f423f
 8000258:	20000000 	.word	0x20000000

0800025c <UART2_Init>:

	}
}


void UART2_Init(void){
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	/*--------------------------------Configuration uart gpio pin------------------------------------------*/
	/*Enble clock access to port A*/
	RCC->AHB1ENR |= (1U<<0);
 8000260:	4b22      	ldr	r3, [pc, #136]	; (80002ec <UART2_Init+0x90>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a21      	ldr	r2, [pc, #132]	; (80002ec <UART2_Init+0x90>)
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	6313      	str	r3, [r2, #48]	; 0x30
	/*Set PA2  & PA 3 mode to alternate function mode */
	GPIOA->MODER |= (0x2<<4);
 800026c:	4b20      	ldr	r3, [pc, #128]	; (80002f0 <UART2_Init+0x94>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a1f      	ldr	r2, [pc, #124]	; (80002f0 <UART2_Init+0x94>)
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x2<<6);
 8000278:	4b1d      	ldr	r3, [pc, #116]	; (80002f0 <UART2_Init+0x94>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a1c      	ldr	r2, [pc, #112]	; (80002f0 <UART2_Init+0x94>)
 800027e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000282:	6013      	str	r3, [r2, #0]
	/*Set PA2 & PA3 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (0x7<<8);
 8000284:	4b1a      	ldr	r3, [pc, #104]	; (80002f0 <UART2_Init+0x94>)
 8000286:	6a1b      	ldr	r3, [r3, #32]
 8000288:	4a19      	ldr	r2, [pc, #100]	; (80002f0 <UART2_Init+0x94>)
 800028a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800028e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x7<<12);
 8000290:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <UART2_Init+0x94>)
 8000292:	6a1b      	ldr	r3, [r3, #32]
 8000294:	4a16      	ldr	r2, [pc, #88]	; (80002f0 <UART2_Init+0x94>)
 8000296:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800029a:	6213      	str	r3, [r2, #32]
	/*-------------------------------Configuration uart module -------------------------------------------*/
	/*Enable clock access to uart 2*/
	RCC->APB1ENR = (1U<<17);
 800029c:	4b13      	ldr	r3, [pc, #76]	; (80002ec <UART2_Init+0x90>)
 800029e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80002a2:	641a      	str	r2, [r3, #64]	; 0x40
	/*Configure baudrate*/
	/*9600- 16Mhz*/
	USART2->BRR |= (0x68<<4);
 80002a4:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <UART2_Init+0x98>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	4a12      	ldr	r2, [pc, #72]	; (80002f4 <UART2_Init+0x98>)
 80002aa:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 80002ae:	6093      	str	r3, [r2, #8]
	USART2->BRR |= (0x03<<0);
 80002b0:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <UART2_Init+0x98>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	4a0f      	ldr	r2, [pc, #60]	; (80002f4 <UART2_Init+0x98>)
 80002b6:	f043 0303 	orr.w	r3, r3, #3
 80002ba:	6093      	str	r3, [r2, #8]
	/*Configure transfer direction*/
	USART2->CR1 |= (1U<<3); 			/*Transmit*/
 80002bc:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <UART2_Init+0x98>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	4a0c      	ldr	r2, [pc, #48]	; (80002f4 <UART2_Init+0x98>)
 80002c2:	f043 0308 	orr.w	r3, r3, #8
 80002c6:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1U<<2);				/*Receiver*/
 80002c8:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <UART2_Init+0x98>)
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	4a09      	ldr	r2, [pc, #36]	; (80002f4 <UART2_Init+0x98>)
 80002ce:	f043 0304 	orr.w	r3, r3, #4
 80002d2:	60d3      	str	r3, [r2, #12]
	/*Enable uart module*/
	USART2->CR1 |= (1U<<13);
 80002d4:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <UART2_Init+0x98>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	4a06      	ldr	r2, [pc, #24]	; (80002f4 <UART2_Init+0x98>)
 80002da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002de:	60d3      	str	r3, [r2, #12]
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40023800 	.word	0x40023800
 80002f0:	40020000 	.word	0x40020000
 80002f4:	40004400 	.word	0x40004400

080002f8 <UART_Transmit>:



void UART_Transmit( uint8_t* TX_Data, uint8_t TX_Size){
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	460b      	mov	r3, r1
 8000302:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8000304:	2300      	movs	r3, #0
 8000306:	73fb      	strb	r3, [r7, #15]
	while( i < TX_Size){
 8000308:	e010      	b.n	800032c <UART_Transmit+0x34>
		/* Check Transmit Data Register Empty*/
		while(!(USART2->SR& (1<<7))){}
 800030a:	bf00      	nop
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <UART_Transmit+0x58>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f9      	beq.n	800030c <UART_Transmit+0x14>
		/* Send data */
		USART2->DR=(uint8_t)(*TX_Data & 0xFF);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	781a      	ldrb	r2, [r3, #0]
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <UART_Transmit+0x58>)
 800031e:	605a      	str	r2, [r3, #4]
		TX_Data++;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
		i++;
 8000326:	7bfb      	ldrb	r3, [r7, #15]
 8000328:	3301      	adds	r3, #1
 800032a:	73fb      	strb	r3, [r7, #15]
	while( i < TX_Size){
 800032c:	7bfa      	ldrb	r2, [r7, #15]
 800032e:	78fb      	ldrb	r3, [r7, #3]
 8000330:	429a      	cmp	r2, r3
 8000332:	d3ea      	bcc.n	800030a <UART_Transmit+0x12>
	}
	/*Waiting transmit complete*/
	while(!(USART2->SR &(1<<6))){}
 8000334:	bf00      	nop
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <UART_Transmit+0x58>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0f9      	beq.n	8000336 <UART_Transmit+0x3e>
}
 8000342:	bf00      	nop
 8000344:	bf00      	nop
 8000346:	3714      	adds	r7, #20
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	40004400 	.word	0x40004400

08000354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000354:	480d      	ldr	r0, [pc, #52]	; (800038c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000356:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000358:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480c      	ldr	r0, [pc, #48]	; (8000390 <LoopForever+0x6>)
  ldr r1, =_edata
 800035e:	490d      	ldr	r1, [pc, #52]	; (8000394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <LoopForever+0xe>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000374:	4c0a      	ldr	r4, [pc, #40]	; (80003a0 <LoopForever+0x16>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000382:	f000 f811 	bl	80003a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000386:	f7ff ff2f 	bl	80001e8 <main>

0800038a <LoopForever>:

LoopForever:
  b LoopForever
 800038a:	e7fe      	b.n	800038a <LoopForever>
  ldr   r0, =_estack
 800038c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000398:	08000410 	.word	0x08000410
  ldr r2, =_sbss
 800039c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80003a0:	20000030 	.word	0x20000030

080003a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC_IRQHandler>
	...

080003a8 <__libc_init_array>:
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	4d0d      	ldr	r5, [pc, #52]	; (80003e0 <__libc_init_array+0x38>)
 80003ac:	4c0d      	ldr	r4, [pc, #52]	; (80003e4 <__libc_init_array+0x3c>)
 80003ae:	1b64      	subs	r4, r4, r5
 80003b0:	10a4      	asrs	r4, r4, #2
 80003b2:	2600      	movs	r6, #0
 80003b4:	42a6      	cmp	r6, r4
 80003b6:	d109      	bne.n	80003cc <__libc_init_array+0x24>
 80003b8:	4d0b      	ldr	r5, [pc, #44]	; (80003e8 <__libc_init_array+0x40>)
 80003ba:	4c0c      	ldr	r4, [pc, #48]	; (80003ec <__libc_init_array+0x44>)
 80003bc:	f000 f818 	bl	80003f0 <_init>
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	10a4      	asrs	r4, r4, #2
 80003c4:	2600      	movs	r6, #0
 80003c6:	42a6      	cmp	r6, r4
 80003c8:	d105      	bne.n	80003d6 <__libc_init_array+0x2e>
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d0:	4798      	blx	r3
 80003d2:	3601      	adds	r6, #1
 80003d4:	e7ee      	b.n	80003b4 <__libc_init_array+0xc>
 80003d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003da:	4798      	blx	r3
 80003dc:	3601      	adds	r6, #1
 80003de:	e7f2      	b.n	80003c6 <__libc_init_array+0x1e>
 80003e0:	08000408 	.word	0x08000408
 80003e4:	08000408 	.word	0x08000408
 80003e8:	08000408 	.word	0x08000408
 80003ec:	0800040c 	.word	0x0800040c

080003f0 <_init>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr

080003fc <_fini>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr
