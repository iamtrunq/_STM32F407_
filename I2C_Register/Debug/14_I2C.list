
14_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000570  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000718  08000720  00010720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000718  08000718  00010720  2**0
                  CONTENTS
  4 .ARM          00000000  08000718  08000718  00010720  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000718  08000720  00010720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000718  08000718  00010718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800071c  0800071c  0001071c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010720  2**0
                  CONTENTS
 10 .bss          00000044  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010720  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000131b  00000000  00000000  00010750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000560  00000000  00000000  00011a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000100  00000000  00000000  00011fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000a8  00000000  00000000  000120d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000144c  00000000  00000000  00012178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001d91  00000000  00000000  000135c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c12d  00000000  00000000  00015355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000a1482  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000220  00000000  00000000  000a14d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000700 	.word	0x08000700

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000700 	.word	0x08000700

080001e8 <GPIO_Toggle_Init>:
#include <stm32f407xx.h>

void GPIO_Toggle_Init(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<3);   //ENABLE clock for port D
 80001ec:	4b0b      	ldr	r3, [pc, #44]	; (800021c <GPIO_Toggle_Init+0x34>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a0a      	ldr	r2, [pc, #40]	; (800021c <GPIO_Toggle_Init+0x34>)
 80001f2:	f043 0308 	orr.w	r3, r3, #8
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER |= (0x55<<24);  // Output for D12 ,D13, D14, D15
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <GPIO_Toggle_Init+0x38>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a08      	ldr	r2, [pc, #32]	; (8000220 <GPIO_Toggle_Init+0x38>)
 80001fe:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000202:	6013      	str	r3, [r2, #0]
	GPIOD->ODR &=~ (0xF<<12);
 8000204:	4b06      	ldr	r3, [pc, #24]	; (8000220 <GPIO_Toggle_Init+0x38>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a05      	ldr	r2, [pc, #20]	; (8000220 <GPIO_Toggle_Init+0x38>)
 800020a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800020e:	6153      	str	r3, [r2, #20]
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	40023800 	.word	0x40023800
 8000220:	40020c00 	.word	0x40020c00

08000224 <Toggle>:

void Toggle(){
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	GPIOD->ODR ^= (1<<14);
 8000228:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <Toggle+0x40>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <Toggle+0x40>)
 800022e:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8000232:	6153      	str	r3, [r2, #20]
	GPIOD->ODR ^= (1<<15);
 8000234:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <Toggle+0x40>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <Toggle+0x40>)
 800023a:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 800023e:	6153      	str	r3, [r2, #20]
	GPIOD->ODR ^= (1<<12);
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <Toggle+0x40>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <Toggle+0x40>)
 8000246:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800024a:	6153      	str	r3, [r2, #20]
	GPIOD->ODR ^= (1<<13);
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <Toggle+0x40>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <Toggle+0x40>)
 8000252:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000256:	6153      	str	r3, [r2, #20]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40020c00 	.word	0x40020c00

08000268 <I2C_Init>:
 * PB9 : SDA
 *
 * */


void I2C_Init(void){
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	/*--------------------------GPIO CONFIGURE-------------------------------*/
	/*Enable clock*/
	RCC->AHB1ENR |=(1U<<1);			/*Enable clock for port B*/
 800026c:	4b39      	ldr	r3, [pc, #228]	; (8000354 <I2C_Init+0xec>)
 800026e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000270:	4a38      	ldr	r2, [pc, #224]	; (8000354 <I2C_Init+0xec>)
 8000272:	f043 0302 	orr.w	r3, r3, #2
 8000276:	6313      	str	r3, [r2, #48]	; 0x30

	/*Aternate function mode*/
	GPIOB->MODER |= (0x2<<12);		/*Alternate Mode*/
 8000278:	4b37      	ldr	r3, [pc, #220]	; (8000358 <I2C_Init+0xf0>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a36      	ldr	r2, [pc, #216]	; (8000358 <I2C_Init+0xf0>)
 800027e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000282:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=(0x2<<18);		/*Alternate Mode*/
 8000284:	4b34      	ldr	r3, [pc, #208]	; (8000358 <I2C_Init+0xf0>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a33      	ldr	r2, [pc, #204]	; (8000358 <I2C_Init+0xf0>)
 800028a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800028e:	6013      	str	r3, [r2, #0]

	/*Output Open Drain*/
	GPIOB->OTYPER |=(1U<<6);
 8000290:	4b31      	ldr	r3, [pc, #196]	; (8000358 <I2C_Init+0xf0>)
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	4a30      	ldr	r2, [pc, #192]	; (8000358 <I2C_Init+0xf0>)
 8000296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800029a:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |=(1U<<9);
 800029c:	4b2e      	ldr	r3, [pc, #184]	; (8000358 <I2C_Init+0xf0>)
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	4a2d      	ldr	r2, [pc, #180]	; (8000358 <I2C_Init+0xf0>)
 80002a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002a6:	6053      	str	r3, [r2, #4]

	/*Speed configure*/
	GPIOB->OSPEEDR |=(0x3<<12);		/*Very High Speed*/
 80002a8:	4b2b      	ldr	r3, [pc, #172]	; (8000358 <I2C_Init+0xf0>)
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	4a2a      	ldr	r2, [pc, #168]	; (8000358 <I2C_Init+0xf0>)
 80002ae:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80002b2:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |=(0x3<<18);		/*Very High Speed*/
 80002b4:	4b28      	ldr	r3, [pc, #160]	; (8000358 <I2C_Init+0xf0>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	4a27      	ldr	r2, [pc, #156]	; (8000358 <I2C_Init+0xf0>)
 80002ba:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80002be:	6093      	str	r3, [r2, #8]

	/*Output Push-Pull*/
	GPIOB->PUPDR |=(0x1<<12);
 80002c0:	4b25      	ldr	r3, [pc, #148]	; (8000358 <I2C_Init+0xf0>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	4a24      	ldr	r2, [pc, #144]	; (8000358 <I2C_Init+0xf0>)
 80002c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002ca:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=(0x1<<18);
 80002cc:	4b22      	ldr	r3, [pc, #136]	; (8000358 <I2C_Init+0xf0>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	4a21      	ldr	r2, [pc, #132]	; (8000358 <I2C_Init+0xf0>)
 80002d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002d6:	60d3      	str	r3, [r2, #12]

	/*Select Alternate Function*/
	GPIOB->AFR[0] |=(0x4<<24);		/*AF4*/
 80002d8:	4b1f      	ldr	r3, [pc, #124]	; (8000358 <I2C_Init+0xf0>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a1e      	ldr	r2, [pc, #120]	; (8000358 <I2C_Init+0xf0>)
 80002de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002e2:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[1] |=(0x4<<4);		/*AF4*/
 80002e4:	4b1c      	ldr	r3, [pc, #112]	; (8000358 <I2C_Init+0xf0>)
 80002e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002e8:	4a1b      	ldr	r2, [pc, #108]	; (8000358 <I2C_Init+0xf0>)
 80002ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002ee:	6253      	str	r3, [r2, #36]	; 0x24


	/*--------------------------I2C CONFIGURE---------------------------------*/
	/**/
	RCC->APB1ENR |=APB1ENR_I2C1EN;
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <I2C_Init+0xec>)
 80002f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002f4:	4a17      	ldr	r2, [pc, #92]	; (8000354 <I2C_Init+0xec>)
 80002f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002fa:	6413      	str	r3, [r2, #64]	; 0x40
	/*Configure mode for I2C*/
	I2C1->CCR &=~ (1U<<15);  //Sm Mode
 80002fc:	4b17      	ldr	r3, [pc, #92]	; (800035c <I2C_Init+0xf4>)
 80002fe:	69db      	ldr	r3, [r3, #28]
 8000300:	4a16      	ldr	r2, [pc, #88]	; (800035c <I2C_Init+0xf4>)
 8000302:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000306:	61d3      	str	r3, [r2, #28]

	/*Configure Frequency*/
	I2C1->CR2 |= (0x10<<0); // 16Mhz
 8000308:	4b14      	ldr	r3, [pc, #80]	; (800035c <I2C_Init+0xf4>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	4a13      	ldr	r2, [pc, #76]	; (800035c <I2C_Init+0xf4>)
 800030e:	f043 0310 	orr.w	r3, r3, #16
 8000312:	6053      	str	r3, [r2, #4]

	/*Configure CCR*/
	I2C1->CCR |= (0x50<<0); // 80 Dec
 8000314:	4b11      	ldr	r3, [pc, #68]	; (800035c <I2C_Init+0xf4>)
 8000316:	69db      	ldr	r3, [r3, #28]
 8000318:	4a10      	ldr	r2, [pc, #64]	; (800035c <I2C_Init+0xf4>)
 800031a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800031e:	61d3      	str	r3, [r2, #28]

	/*Configure TRISE
	 * Note : READ MANUAL*/
	I2C1->TRISE = 0;
 8000320:	4b0e      	ldr	r3, [pc, #56]	; (800035c <I2C_Init+0xf4>)
 8000322:	2200      	movs	r2, #0
 8000324:	621a      	str	r2, [r3, #32]
	I2C1->TRISE |=(0x11<<0);
 8000326:	4b0d      	ldr	r3, [pc, #52]	; (800035c <I2C_Init+0xf4>)
 8000328:	6a1b      	ldr	r3, [r3, #32]
 800032a:	4a0c      	ldr	r2, [pc, #48]	; (800035c <I2C_Init+0xf4>)
 800032c:	f043 0311 	orr.w	r3, r3, #17
 8000330:	6213      	str	r3, [r2, #32]

	/*Enable ACK*/
	I2C1->CR1 |= CR1_ACK;
 8000332:	4b0a      	ldr	r3, [pc, #40]	; (800035c <I2C_Init+0xf4>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a09      	ldr	r2, [pc, #36]	; (800035c <I2C_Init+0xf4>)
 8000338:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800033c:	6013      	str	r3, [r2, #0]

	/*Enable I2C1*/
	I2C1->CR1 |= CR1_PE;
 800033e:	4b07      	ldr	r3, [pc, #28]	; (800035c <I2C_Init+0xf4>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a06      	ldr	r2, [pc, #24]	; (800035c <I2C_Init+0xf4>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	6013      	str	r3, [r2, #0]

}
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	40023800 	.word	0x40023800
 8000358:	40020400 	.word	0x40020400
 800035c:	40005400 	.word	0x40005400

08000360 <I2C_MasterSendData>:
void I2C_MasterSendData(uint8_t Addrres,uint8_t *pTXbuffer, uint32_t Len, uint8_t StartRepeat){
 8000360:	b480      	push	{r7}
 8000362:	b087      	sub	sp, #28
 8000364:	af00      	add	r7, sp, #0
 8000366:	60b9      	str	r1, [r7, #8]
 8000368:	607a      	str	r2, [r7, #4]
 800036a:	461a      	mov	r2, r3
 800036c:	4603      	mov	r3, r0
 800036e:	73fb      	strb	r3, [r7, #15]
 8000370:	4613      	mov	r3, r2
 8000372:	73bb      	strb	r3, [r7, #14]
	/*1. Generate Start condition*/
	I2C1->CR1 |= CR1_START;
 8000374:	4b28      	ldr	r3, [pc, #160]	; (8000418 <I2C_MasterSendData+0xb8>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a27      	ldr	r2, [pc, #156]	; (8000418 <I2C_MasterSendData+0xb8>)
 800037a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800037e:	6013      	str	r3, [r2, #0]
	/*2. While start condition complete*/
	/*Note : until SB is cleared SCL will be stretched (pull to LOW)*/
	while(!(I2C1->SR1 & SR1_SB));
 8000380:	bf00      	nop
 8000382:	4b25      	ldr	r3, [pc, #148]	; (8000418 <I2C_MasterSendData+0xb8>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f9      	beq.n	8000382 <I2C_MasterSendData+0x22>
	/*3. Send the Address of the slave with R/W bit -> 8bit*/
	I2C1->DR = (Addrres << 1) ; //Write
 800038e:	7bfb      	ldrb	r3, [r7, #15]
 8000390:	005a      	lsls	r2, r3, #1
 8000392:	4b21      	ldr	r3, [pc, #132]	; (8000418 <I2C_MasterSendData+0xb8>)
 8000394:	611a      	str	r2, [r3, #16]
	/*4. Wait address phase is completed*/
	while( !(I2C1->SR1 & SR1_ADDR) );
 8000396:	bf00      	nop
 8000398:	4b1f      	ldr	r3, [pc, #124]	; (8000418 <I2C_MasterSendData+0xb8>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	f003 0302 	and.w	r3, r3, #2
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0f9      	beq.n	8000398 <I2C_MasterSendData+0x38>
	/*5, Clear ADDR flag*/
	/*Note uintil ADDR is cleared then SCL will be stretched (pulled to LOW)*/
	uint8_t dumpy = I2C1->SR1  & I2C1->SR2;
 80003a4:	4b1c      	ldr	r3, [pc, #112]	; (8000418 <I2C_MasterSendData+0xb8>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	b2da      	uxtb	r2, r3
 80003aa:	4b1b      	ldr	r3, [pc, #108]	; (8000418 <I2C_MasterSendData+0xb8>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	4013      	ands	r3, r2
 80003b2:	75fb      	strb	r3, [r7, #23]
	/*6. Send Data until Len = 0*/

	while(Len > 0){
 80003b4:	e010      	b.n	80003d8 <I2C_MasterSendData+0x78>
		while(!(I2C1->SR1 & SR1_TXE));
 80003b6:	bf00      	nop
 80003b8:	4b17      	ldr	r3, [pc, #92]	; (8000418 <I2C_MasterSendData+0xb8>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d0f9      	beq.n	80003b8 <I2C_MasterSendData+0x58>
		I2C1->DR = *pTXbuffer;
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	781a      	ldrb	r2, [r3, #0]
 80003c8:	4b13      	ldr	r3, [pc, #76]	; (8000418 <I2C_MasterSendData+0xb8>)
 80003ca:	611a      	str	r2, [r3, #16]
		pTXbuffer++;
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	3301      	adds	r3, #1
 80003d0:	60bb      	str	r3, [r7, #8]
		Len--;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	3b01      	subs	r3, #1
 80003d6:	607b      	str	r3, [r7, #4]
	while(Len > 0){
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d1eb      	bne.n	80003b6 <I2C_MasterSendData+0x56>
	}

	/* 7. When Len = 0 , wait TXE = 1 and BTF = 1 before generate STOP condition */
	/*Note TXE = 1 , BTF = 1, mean both Shift Register (SR) and Data Register(DR) are empty and next transmission should begin and auto clear by Stop condition*/
	/*When BTF = 1 SCL will be stretched (pulled to LOW)*/
	while(!(I2C1->SR1 & SR1_TXE));
 80003de:	bf00      	nop
 80003e0:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <I2C_MasterSendData+0xb8>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d0f9      	beq.n	80003e0 <I2C_MasterSendData+0x80>
	while(!(I2C1->SR1 & SR1_BTF));
 80003ec:	bf00      	nop
 80003ee:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <I2C_MasterSendData+0xb8>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f003 0304 	and.w	r3, r3, #4
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0f9      	beq.n	80003ee <I2C_MasterSendData+0x8e>

	/*8. Generate STOP condition and master neend not to wait for the completion of stop condition*/
	/*Note: Generateing STOP, automatically clears the BTF*/
	if(StartRepeat == DISABLE){
 80003fa:	7bbb      	ldrb	r3, [r7, #14]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d105      	bne.n	800040c <I2C_MasterSendData+0xac>
		I2C1->CR1 |= CR1_STOP;
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <I2C_MasterSendData+0xb8>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <I2C_MasterSendData+0xb8>)
 8000406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800040a:	6013      	str	r3, [r2, #0]
	}
}
 800040c:	bf00      	nop
 800040e:	371c      	adds	r7, #28
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	40005400 	.word	0x40005400

0800041c <main>:

uint8_t RX_Buffer[20];
uint8_t TX_Buffer[20];

int main(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
	UART2_Init();
 8000422:	f000 f85b 	bl	80004dc <UART2_Init>

	GPIO_Toggle_Init();
 8000426:	f7ff fedf 	bl	80001e8 <GPIO_Toggle_Init>
	I2C_Init();
 800042a:	f7ff ff1d 	bl	8000268 <I2C_Init>



	while(1){
		SYS_TICK_Delay(1000);
 800042e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000432:	f000 f829 	bl	8000488 <SYS_TICK_Delay>
		Toggle();
 8000436:	f7ff fef5 	bl	8000224 <Toggle>
		uint8_t Data[1]={0xF4};
 800043a:	23f4      	movs	r3, #244	; 0xf4
 800043c:	713b      	strb	r3, [r7, #4]
		I2C_MasterSendData(0x27,Data,1, DISABLE);
 800043e:	1d39      	adds	r1, r7, #4
 8000440:	2300      	movs	r3, #0
 8000442:	2201      	movs	r2, #1
 8000444:	2027      	movs	r0, #39	; 0x27
 8000446:	f7ff ff8b 	bl	8000360 <I2C_MasterSendData>
	while(1){
 800044a:	e7f0      	b.n	800042e <main+0x12>

0800044c <USART2_IRQHandler>:

	}


}
void USART2_IRQHandler(void){
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	/*Check which interrupt*/
	if( USART2->SR & (1<<5) ){
 8000450:	4b0a      	ldr	r3, [pc, #40]	; (800047c <USART2_IRQHandler+0x30>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f003 0320 	and.w	r3, r3, #32
 8000458:	2b00      	cmp	r3, #0
 800045a:	d007      	beq.n	800046c <USART2_IRQHandler+0x20>
		UART_Receive(RX_Buffer,4);
 800045c:	2104      	movs	r1, #4
 800045e:	4808      	ldr	r0, [pc, #32]	; (8000480 <USART2_IRQHandler+0x34>)
 8000460:	f000 f8d8 	bl	8000614 <UART_Receive>
		UART_Transmit(TX_Buffer,20);
 8000464:	2114      	movs	r1, #20
 8000466:	4807      	ldr	r0, [pc, #28]	; (8000484 <USART2_IRQHandler+0x38>)
 8000468:	f000 f8a6 	bl	80005b8 <UART_Transmit>

		//Toggle();
	}
	/*Clear interrupt flag*/
	USART2->SR &=~ (1<<5);
 800046c:	4b03      	ldr	r3, [pc, #12]	; (800047c <USART2_IRQHandler+0x30>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a02      	ldr	r2, [pc, #8]	; (800047c <USART2_IRQHandler+0x30>)
 8000472:	f023 0320 	bic.w	r3, r3, #32
 8000476:	6013      	str	r3, [r2, #0]


}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40004400 	.word	0x40004400
 8000480:	2000001c 	.word	0x2000001c
 8000484:	20000030 	.word	0x20000030

08000488 <SYS_TICK_Delay>:
#define SYSTICK_LOAD_VALUE		16000
#define CTRL_ENABLE				(1U<<0)
#define CTRL_CLKSRC				(1U<<2)
#define	CTRL_COUNTFLAG			(1U<<16)

void SYS_TICK_Delay(int ms){
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	/*Reaload with number of clocks per millisecond*/
	SysTick->LOAD = SYSTICK_LOAD_VALUE;
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <SYS_TICK_Delay+0x50>)
 8000492:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000496:	605a      	str	r2, [r3, #4]

	/*Clear systick current value register*/
	SysTick->VAL = 0;
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <SYS_TICK_Delay+0x50>)
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]

	/*Enable systick and select internal clock source*/
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <SYS_TICK_Delay+0x50>)
 80004a0:	2205      	movs	r2, #5
 80004a2:	601a      	str	r2, [r3, #0]

	for(int i = 0;i < ms; i++){
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	e009      	b.n	80004be <SYS_TICK_Delay+0x36>
		/*Wait until the countflag is set*/

		while( (SysTick->CTRL & CTRL_COUNTFLAG) == 0 ){}
 80004aa:	bf00      	nop
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <SYS_TICK_Delay+0x50>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d0f9      	beq.n	80004ac <SYS_TICK_Delay+0x24>
	for(int i = 0;i < ms; i++){
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	3301      	adds	r3, #1
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	dbf1      	blt.n	80004aa <SYS_TICK_Delay+0x22>
	}
	SysTick->CTRL = 0;
 80004c6:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <SYS_TICK_Delay+0x50>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
}
 80004cc:	bf00      	nop
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	e000e010 	.word	0xe000e010

080004dc <UART2_Init>:
 * Stop bit : 1 bit
 * Size of Data : 8 bit
 * Position NVIC : 38 -> 1 st register
 */

void UART2_Init(void){
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
	/*--------------------------------Configuration uart gpio pin------------------------------------------*/
	/*Enble clock access to port A*/
	RCC->AHB1ENR |= (1U<<0);
 80004e0:	4b32      	ldr	r3, [pc, #200]	; (80005ac <UART2_Init+0xd0>)
 80004e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e4:	4a31      	ldr	r2, [pc, #196]	; (80005ac <UART2_Init+0xd0>)
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	6313      	str	r3, [r2, #48]	; 0x30
	/*Set PA2  & PA 3 mode to alternate function mode */
	GPIOA->MODER |= (0x2<<4);
 80004ec:	4b30      	ldr	r3, [pc, #192]	; (80005b0 <UART2_Init+0xd4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a2f      	ldr	r2, [pc, #188]	; (80005b0 <UART2_Init+0xd4>)
 80004f2:	f043 0320 	orr.w	r3, r3, #32
 80004f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x2<<6);
 80004f8:	4b2d      	ldr	r3, [pc, #180]	; (80005b0 <UART2_Init+0xd4>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a2c      	ldr	r2, [pc, #176]	; (80005b0 <UART2_Init+0xd4>)
 80004fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000502:	6013      	str	r3, [r2, #0]
	/*Set PA2 & PA3 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (0x7<<8);
 8000504:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <UART2_Init+0xd4>)
 8000506:	6a1b      	ldr	r3, [r3, #32]
 8000508:	4a29      	ldr	r2, [pc, #164]	; (80005b0 <UART2_Init+0xd4>)
 800050a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800050e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x7<<12);
 8000510:	4b27      	ldr	r3, [pc, #156]	; (80005b0 <UART2_Init+0xd4>)
 8000512:	6a1b      	ldr	r3, [r3, #32]
 8000514:	4a26      	ldr	r2, [pc, #152]	; (80005b0 <UART2_Init+0xd4>)
 8000516:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800051a:	6213      	str	r3, [r2, #32]
	/*-------------------------------Configuration uart module -------------------------------------------*/
	/*Enable clock access to uart 2*/
	RCC->APB1ENR = (1U<<17);
 800051c:	4b23      	ldr	r3, [pc, #140]	; (80005ac <UART2_Init+0xd0>)
 800051e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000522:	641a      	str	r2, [r3, #64]	; 0x40
	/* Other setting*/
	USART2->CR1 = 0;					/*Reset register*/
 8000524:	4b23      	ldr	r3, [pc, #140]	; (80005b4 <UART2_Init+0xd8>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
	USART2->CR1 &=~ (1<<15);			/* Oversampling = 16 */
 800052a:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <UART2_Init+0xd8>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	4a21      	ldr	r2, [pc, #132]	; (80005b4 <UART2_Init+0xd8>)
 8000530:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000534:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &=~ (1<<12);			/* Word length = 8 bits */
 8000536:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <UART2_Init+0xd8>)
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	4a1e      	ldr	r2, [pc, #120]	; (80005b4 <UART2_Init+0xd8>)
 800053c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000540:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &=~(1<<10); 			/* Parity Disable */
 8000542:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <UART2_Init+0xd8>)
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	4a1b      	ldr	r2, [pc, #108]	; (80005b4 <UART2_Init+0xd8>)
 8000548:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800054c:	60d3      	str	r3, [r2, #12]
	USART2->CR2 &=~ (0x3<<12);			/* 1 Stop bit */
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <UART2_Init+0xd8>)
 8000550:	691b      	ldr	r3, [r3, #16]
 8000552:	4a18      	ldr	r2, [pc, #96]	; (80005b4 <UART2_Init+0xd8>)
 8000554:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000558:	6113      	str	r3, [r2, #16]

	USART2->CR1 |= (1<<5);		/* Enable interrupt when received Data */
 800055a:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <UART2_Init+0xd8>)
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	4a15      	ldr	r2, [pc, #84]	; (80005b4 <UART2_Init+0xd8>)
 8000560:	f043 0320 	orr.w	r3, r3, #32
 8000564:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 |= (1<<4);		/*IDLE*/
	/*Configure baudrate*/
	/*19200 Bit per second- 16Mhz*/
	USART2->BRR |= (0x34<<4);
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <UART2_Init+0xd8>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	4a12      	ldr	r2, [pc, #72]	; (80005b4 <UART2_Init+0xd8>)
 800056c:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 8000570:	6093      	str	r3, [r2, #8]
	USART2->BRR |= (0x01<<0);
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <UART2_Init+0xd8>)
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	4a0f      	ldr	r2, [pc, #60]	; (80005b4 <UART2_Init+0xd8>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6093      	str	r3, [r2, #8]

	/*Configure transfer direction*/
	USART2->CR1 |= (1U<<3); 			/* Transmit */
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <UART2_Init+0xd8>)
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	4a0c      	ldr	r2, [pc, #48]	; (80005b4 <UART2_Init+0xd8>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1U<<2);				/* Receiver */
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <UART2_Init+0xd8>)
 800058c:	68db      	ldr	r3, [r3, #12]
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <UART2_Init+0xd8>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	60d3      	str	r3, [r2, #12]

	/*Enable uart module*/
	USART2->CR1 |= (1U<<13);
 8000596:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <UART2_Init+0xd8>)
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <UART2_Init+0xd8>)
 800059c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005a0:	60d3      	str	r3, [r2, #12]
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40020000 	.word	0x40020000
 80005b4:	40004400 	.word	0x40004400

080005b8 <UART_Transmit>:
	NVIC->ISER[1] |= 1 << (USART2_IRQn % 32);
	//NVIC_EnableIRQ(USART2_IRQn);
}


void UART_Transmit( uint8_t *TX_Data, uint8_t TX_Size){
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	460b      	mov	r3, r1
 80005c2:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]
	while( i < TX_Size){
 80005c8:	e010      	b.n	80005ec <UART_Transmit+0x34>
		/* Check Transmit Data Register Empty*/
		while(!(USART2->SR& (1<<7))){}
 80005ca:	bf00      	nop
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <UART_Transmit+0x58>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d0f9      	beq.n	80005cc <UART_Transmit+0x14>
		/* Send data */
		USART2->DR=(uint8_t)(*TX_Data & 0xFF);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	781a      	ldrb	r2, [r3, #0]
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <UART_Transmit+0x58>)
 80005de:	605a      	str	r2, [r3, #4]
		TX_Data++;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	607b      	str	r3, [r7, #4]
		i++;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	3301      	adds	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
	while( i < TX_Size){
 80005ec:	7bfa      	ldrb	r2, [r7, #15]
 80005ee:	78fb      	ldrb	r3, [r7, #3]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d3ea      	bcc.n	80005ca <UART_Transmit+0x12>
	}
	/*Waiting transmit complete*/
	while(!(USART2->SR &(1<<6))){}
 80005f4:	bf00      	nop
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <UART_Transmit+0x58>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0f9      	beq.n	80005f6 <UART_Transmit+0x3e>
}
 8000602:	bf00      	nop
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	40004400 	.word	0x40004400

08000614 <UART_Receive>:
void UART_Receive(uint8_t *RX_Data,uint8_t RX_Size){
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
	while(i < RX_Size){
 8000624:	e011      	b.n	800064a <UART_Receive+0x36>
		/*Waitting Data Receive not empty*/
		while( !(USART2->SR & (1<<5)) ){}
 8000626:	bf00      	nop
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <UART_Receive+0x4c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f003 0320 	and.w	r3, r3, #32
 8000630:	2b00      	cmp	r3, #0
 8000632:	d0f9      	beq.n	8000628 <UART_Receive+0x14>
		*RX_Data = (uint8_t) (USART2->DR & 0xFF);
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <UART_Receive+0x4c>)
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	b2da      	uxtb	r2, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	701a      	strb	r2, [r3, #0]
		RX_Data++;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	3301      	adds	r3, #1
 8000642:	607b      	str	r3, [r7, #4]
		i++;
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	3301      	adds	r3, #1
 8000648:	73fb      	strb	r3, [r7, #15]
	while(i < RX_Size){
 800064a:	7bfa      	ldrb	r2, [r7, #15]
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	429a      	cmp	r2, r3
 8000650:	d3e9      	bcc.n	8000626 <UART_Receive+0x12>
	}
}
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	40004400 	.word	0x40004400

08000664 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000666:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000668:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800066e:	490d      	ldr	r1, [pc, #52]	; (80006a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000670:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <LoopForever+0xe>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000674:	e002      	b.n	800067c <LoopCopyDataInit>

08000676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067a:	3304      	adds	r3, #4

0800067c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800067c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000680:	d3f9      	bcc.n	8000676 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000682:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000684:	4c0a      	ldr	r4, [pc, #40]	; (80006b0 <LoopForever+0x16>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000688:	e001      	b.n	800068e <LoopFillZerobss>

0800068a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800068c:	3204      	adds	r2, #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000690:	d3fb      	bcc.n	800068a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000692:	f000 f811 	bl	80006b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000696:	f7ff fec1 	bl	800041c <main>

0800069a <LoopForever>:

LoopForever:
  b LoopForever
 800069a:	e7fe      	b.n	800069a <LoopForever>
  ldr   r0, =_estack
 800069c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006a8:	08000720 	.word	0x08000720
  ldr r2, =_sbss
 80006ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006b0:	20000044 	.word	0x20000044

080006b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b4:	e7fe      	b.n	80006b4 <ADC_IRQHandler>
	...

080006b8 <__libc_init_array>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	4d0d      	ldr	r5, [pc, #52]	; (80006f0 <__libc_init_array+0x38>)
 80006bc:	4c0d      	ldr	r4, [pc, #52]	; (80006f4 <__libc_init_array+0x3c>)
 80006be:	1b64      	subs	r4, r4, r5
 80006c0:	10a4      	asrs	r4, r4, #2
 80006c2:	2600      	movs	r6, #0
 80006c4:	42a6      	cmp	r6, r4
 80006c6:	d109      	bne.n	80006dc <__libc_init_array+0x24>
 80006c8:	4d0b      	ldr	r5, [pc, #44]	; (80006f8 <__libc_init_array+0x40>)
 80006ca:	4c0c      	ldr	r4, [pc, #48]	; (80006fc <__libc_init_array+0x44>)
 80006cc:	f000 f818 	bl	8000700 <_init>
 80006d0:	1b64      	subs	r4, r4, r5
 80006d2:	10a4      	asrs	r4, r4, #2
 80006d4:	2600      	movs	r6, #0
 80006d6:	42a6      	cmp	r6, r4
 80006d8:	d105      	bne.n	80006e6 <__libc_init_array+0x2e>
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e0:	4798      	blx	r3
 80006e2:	3601      	adds	r6, #1
 80006e4:	e7ee      	b.n	80006c4 <__libc_init_array+0xc>
 80006e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ea:	4798      	blx	r3
 80006ec:	3601      	adds	r6, #1
 80006ee:	e7f2      	b.n	80006d6 <__libc_init_array+0x1e>
 80006f0:	08000718 	.word	0x08000718
 80006f4:	08000718 	.word	0x08000718
 80006f8:	08000718 	.word	0x08000718
 80006fc:	0800071c 	.word	0x0800071c

08000700 <_init>:
 8000700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000702:	bf00      	nop
 8000704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000706:	bc08      	pop	{r3}
 8000708:	469e      	mov	lr, r3
 800070a:	4770      	bx	lr

0800070c <_fini>:
 800070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070e:	bf00      	nop
 8000710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000712:	bc08      	pop	{r3}
 8000714:	469e      	mov	lr, r3
 8000716:	4770      	bx	lr
