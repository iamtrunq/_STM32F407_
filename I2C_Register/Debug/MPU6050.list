
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f0c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080010b4  080010bc  000110bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080010b4  080010b4  000110bc  2**0
                  CONTENTS
  4 .ARM          00000000  080010b4  080010b4  000110bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010b4  080010bc  000110bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010b4  080010b4  000110b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010b8  080010b8  000110b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000110bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000110bc  2**0
                  CONTENTS
 10 .bss          00000044  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000110bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000015c1  00000000  00000000  000110ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005ce  00000000  00000000  000126ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  00012c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000c8  00000000  00000000  00012da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001540  00000000  00000000  00012e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002084  00000000  00000000  000143a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c3c0  00000000  00000000  0001642c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000a27ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003d4  00000000  00000000  000a283c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800109c 	.word	0x0800109c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800109c 	.word	0x0800109c

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2f>:
 8000984:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000988:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800098c:	bf24      	itt	cs
 800098e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000992:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000996:	d90d      	bls.n	80009b4 <__aeabi_d2f+0x30>
 8000998:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800099c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ac:	bf08      	it	eq
 80009ae:	f020 0001 	biceq.w	r0, r0, #1
 80009b2:	4770      	bx	lr
 80009b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b8:	d121      	bne.n	80009fe <__aeabi_d2f+0x7a>
 80009ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009be:	bfbc      	itt	lt
 80009c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009c4:	4770      	bxlt	lr
 80009c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ce:	f1c2 0218 	rsb	r2, r2, #24
 80009d2:	f1c2 0c20 	rsb	ip, r2, #32
 80009d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009da:	fa20 f002 	lsr.w	r0, r0, r2
 80009de:	bf18      	it	ne
 80009e0:	f040 0001 	orrne.w	r0, r0, #1
 80009e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f0:	ea40 000c 	orr.w	r0, r0, ip
 80009f4:	fa23 f302 	lsr.w	r3, r3, r2
 80009f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009fc:	e7cc      	b.n	8000998 <__aeabi_d2f+0x14>
 80009fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a02:	d107      	bne.n	8000a14 <__aeabi_d2f+0x90>
 8000a04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a08:	bf1e      	ittt	ne
 8000a0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a12:	4770      	bxne	lr
 8000a14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <GPIO_Toggle_Init>:
#include <stm32f407xx.h>

void GPIO_Toggle_Init(){
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<3);   //ENABLE clock for port D
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <GPIO_Toggle_Init+0x34>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <GPIO_Toggle_Init+0x34>)
 8000a2e:	f043 0308 	orr.w	r3, r3, #8
 8000a32:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER |= (0x55<<24);  // Output for D12 ,D13, D14, D15
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <GPIO_Toggle_Init+0x38>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <GPIO_Toggle_Init+0x38>)
 8000a3a:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000a3e:	6013      	str	r3, [r2, #0]
	GPIOD->ODR &=~ (0xF<<12);
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <GPIO_Toggle_Init+0x38>)
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <GPIO_Toggle_Init+0x38>)
 8000a46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000a4a:	6153      	str	r3, [r2, #20]
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020c00 	.word	0x40020c00

08000a60 <Toggle>:

void Toggle(){
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
	GPIOD->ODR ^= (1<<14);
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <Toggle+0x40>)
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <Toggle+0x40>)
 8000a6a:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8000a6e:	6153      	str	r3, [r2, #20]
	GPIOD->ODR ^= (1<<15);
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <Toggle+0x40>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <Toggle+0x40>)
 8000a76:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8000a7a:	6153      	str	r3, [r2, #20]
	GPIOD->ODR ^= (1<<12);
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <Toggle+0x40>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <Toggle+0x40>)
 8000a82:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000a86:	6153      	str	r3, [r2, #20]
	GPIOD->ODR ^= (1<<13);
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <Toggle+0x40>)
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <Toggle+0x40>)
 8000a8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000a92:	6153      	str	r3, [r2, #20]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40020c00 	.word	0x40020c00

08000aa4 <I2C_Init>:
 * PB9 : SDA
 *
 * */


void I2C_Init(void){
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
	/*--------------------------GPIO CONFIGURE-------------------------------*/
	/*Enable clock*/
	RCC->AHB1ENR |=(1U<<1);			/*Enable clock for port B*/
 8000aa8:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <I2C_Init+0xec>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	4a38      	ldr	r2, [pc, #224]	; (8000b90 <I2C_Init+0xec>)
 8000aae:	f043 0302 	orr.w	r3, r3, #2
 8000ab2:	6313      	str	r3, [r2, #48]	; 0x30

	/*Aternate function mode*/
	GPIOB->MODER |= (0x2<<12);		/*Alternate Mode*/
 8000ab4:	4b37      	ldr	r3, [pc, #220]	; (8000b94 <I2C_Init+0xf0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a36      	ldr	r2, [pc, #216]	; (8000b94 <I2C_Init+0xf0>)
 8000aba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000abe:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=(0x2<<18);		/*Alternate Mode*/
 8000ac0:	4b34      	ldr	r3, [pc, #208]	; (8000b94 <I2C_Init+0xf0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a33      	ldr	r2, [pc, #204]	; (8000b94 <I2C_Init+0xf0>)
 8000ac6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000aca:	6013      	str	r3, [r2, #0]

	/*Output Open Drain*/
	GPIOB->OTYPER |=(1U<<6);
 8000acc:	4b31      	ldr	r3, [pc, #196]	; (8000b94 <I2C_Init+0xf0>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	4a30      	ldr	r2, [pc, #192]	; (8000b94 <I2C_Init+0xf0>)
 8000ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad6:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |=(1U<<9);
 8000ad8:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <I2C_Init+0xf0>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	4a2d      	ldr	r2, [pc, #180]	; (8000b94 <I2C_Init+0xf0>)
 8000ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae2:	6053      	str	r3, [r2, #4]

	/*Speed configure*/
	GPIOB->OSPEEDR |=(0x3<<12);		/*Very High Speed*/
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <I2C_Init+0xf0>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	4a2a      	ldr	r2, [pc, #168]	; (8000b94 <I2C_Init+0xf0>)
 8000aea:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000aee:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |=(0x3<<18);		/*Very High Speed*/
 8000af0:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <I2C_Init+0xf0>)
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	4a27      	ldr	r2, [pc, #156]	; (8000b94 <I2C_Init+0xf0>)
 8000af6:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8000afa:	6093      	str	r3, [r2, #8]

	/*Output Push-Pull*/
	GPIOB->PUPDR |=(0x1<<12);
 8000afc:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <I2C_Init+0xf0>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	4a24      	ldr	r2, [pc, #144]	; (8000b94 <I2C_Init+0xf0>)
 8000b02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b06:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=(0x1<<18);
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <I2C_Init+0xf0>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <I2C_Init+0xf0>)
 8000b0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b12:	60d3      	str	r3, [r2, #12]

	/*Select Alternate Function*/
	GPIOB->AFR[0] |=(0x4<<24);		/*AF4*/
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <I2C_Init+0xf0>)
 8000b16:	6a1b      	ldr	r3, [r3, #32]
 8000b18:	4a1e      	ldr	r2, [pc, #120]	; (8000b94 <I2C_Init+0xf0>)
 8000b1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b1e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[1] |=(0x4<<4);		/*AF4*/
 8000b20:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <I2C_Init+0xf0>)
 8000b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b24:	4a1b      	ldr	r2, [pc, #108]	; (8000b94 <I2C_Init+0xf0>)
 8000b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b2a:	6253      	str	r3, [r2, #36]	; 0x24


	/*--------------------------I2C CONFIGURE---------------------------------*/
	/**/
	RCC->APB1ENR |=APB1ENR_I2C1EN;
 8000b2c:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <I2C_Init+0xec>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <I2C_Init+0xec>)
 8000b32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b36:	6413      	str	r3, [r2, #64]	; 0x40
	/*Configure mode for I2C*/
	I2C1->CCR &=~ (1U<<15);  //Sm Mode
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <I2C_Init+0xf4>)
 8000b3a:	69db      	ldr	r3, [r3, #28]
 8000b3c:	4a16      	ldr	r2, [pc, #88]	; (8000b98 <I2C_Init+0xf4>)
 8000b3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b42:	61d3      	str	r3, [r2, #28]

	/*Configure Frequency*/
	I2C1->CR2 |= (0x10<<0); // 16Mhz
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <I2C_Init+0xf4>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <I2C_Init+0xf4>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	6053      	str	r3, [r2, #4]

	/*Configure CCR*/
	I2C1->CCR |= (0x50<<0); // 80 Dec
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <I2C_Init+0xf4>)
 8000b52:	69db      	ldr	r3, [r3, #28]
 8000b54:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <I2C_Init+0xf4>)
 8000b56:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000b5a:	61d3      	str	r3, [r2, #28]

	/*Configure TRISE
	 * Note : READ MANUAL*/
	I2C1->TRISE = 0;
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <I2C_Init+0xf4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
	I2C1->TRISE |=(0x11<<0);
 8000b62:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <I2C_Init+0xf4>)
 8000b64:	6a1b      	ldr	r3, [r3, #32]
 8000b66:	4a0c      	ldr	r2, [pc, #48]	; (8000b98 <I2C_Init+0xf4>)
 8000b68:	f043 0311 	orr.w	r3, r3, #17
 8000b6c:	6213      	str	r3, [r2, #32]

	/*Enable ACK*/
	I2C1->CR1 |= CR1_ACK;
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <I2C_Init+0xf4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a09      	ldr	r2, [pc, #36]	; (8000b98 <I2C_Init+0xf4>)
 8000b74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b78:	6013      	str	r3, [r2, #0]

	/*Enable I2C1*/
	I2C1->CR1 |= CR1_PE;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <I2C_Init+0xf4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <I2C_Init+0xf4>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6013      	str	r3, [r2, #0]

}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020400 	.word	0x40020400
 8000b98:	40005400 	.word	0x40005400

08000b9c <I2C_Read_Memory>:
	/*Re-enable ACKing */
	I2C1->CR1 |= CR1_ACK;
}


void I2C_Read_Memory(uint8_t Slave_Address, uint8_t Memory_Address, int Len ,uint8_t *Data){
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60ba      	str	r2, [r7, #8]
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	73fb      	strb	r3, [r7, #15]
 8000baa:	460b      	mov	r3, r1
 8000bac:	73bb      	strb	r3, [r7, #14]
	volatile int temp;

	/*Wait I2C not busy*/
	while (I2C1->SR2 & (SR2_BUSY)){}
 8000bae:	bf00      	nop
 8000bb0:	4b50      	ldr	r3, [pc, #320]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d1f9      	bne.n	8000bb0 <I2C_Read_Memory+0x14>

	/*Generate start condition*/
	I2C1->CR1 |= CR1_START;
 8000bbc:	4b4d      	ldr	r3, [pc, #308]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a4c      	ldr	r2, [pc, #304]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc6:	6013      	str	r3, [r2, #0]

	/*Wait start bit generated*/
	while( !(I2C1->SR1 & SR1_SB) ){}
 8000bc8:	bf00      	nop
 8000bca:	4b4a      	ldr	r3, [pc, #296]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0f9      	beq.n	8000bca <I2C_Read_Memory+0x2e>

	/*Transmit slave address + Write*/
	I2C1->DR = Slave_Address << 1 + 0;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	005a      	lsls	r2, r3, #1
 8000bda:	4b46      	ldr	r3, [pc, #280]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000bdc:	611a      	str	r2, [r3, #16]

	/*Wait uintil addr flag is set*/
	while( !(I2C1->SR1 & SR1_ADDR) ){}
 8000bde:	bf00      	nop
 8000be0:	4b44      	ldr	r3, [pc, #272]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	f003 0302 	and.w	r3, r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d0f9      	beq.n	8000be0 <I2C_Read_Memory+0x44>

	/*Clear addr flag*/
	temp = I2C1->SR2 ;
 8000bec:	4b41      	ldr	r3, [pc, #260]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	617b      	str	r3, [r7, #20]

	/*Wait until transmit empty*/
	while ( !(I2C1->SR1 & SR1_TXE) ){}
 8000bf2:	bf00      	nop
 8000bf4:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d0f9      	beq.n	8000bf4 <I2C_Read_Memory+0x58>

	/*Send memory address*/
	I2C1->DR = Memory_Address;
 8000c00:	4a3c      	ldr	r2, [pc, #240]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000c02:	7bbb      	ldrb	r3, [r7, #14]
 8000c04:	6113      	str	r3, [r2, #16]



	/*Generate restart*/
	I2C1->CR1 |= CR1_START;
 8000c06:	4b3b      	ldr	r3, [pc, #236]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a3a      	ldr	r2, [pc, #232]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c10:	6013      	str	r3, [r2, #0]

	/*Wait until start flag is set*/
	while( !(I2C1->SR1 & SR1_SB) ){}
 8000c12:	bf00      	nop
 8000c14:	4b37      	ldr	r3, [pc, #220]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d0f9      	beq.n	8000c14 <I2C_Read_Memory+0x78>

	/*Transmit slave address + Read*/
	I2C1->DR = (Slave_Address <<1) |1;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	f043 0201 	orr.w	r2, r3, #1
 8000c28:	4b32      	ldr	r3, [pc, #200]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000c2a:	611a      	str	r2, [r3, #16]

	/*Wait uintil addr flag is set*/
	while( !(I2C1->SR1 & SR1_ADDR) ){}
 8000c2c:	bf00      	nop
 8000c2e:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d0f9      	beq.n	8000c2e <I2C_Read_Memory+0x92>

	/*Clear addr flag*/
	temp = I2C1->SR2 | I2C1->SR1 ;
 8000c3a:	4b2e      	ldr	r3, [pc, #184]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000c3c:	699a      	ldr	r2, [r3, #24]
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	617b      	str	r3, [r7, #20]
	if(Len ==1 ){
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d120      	bne.n	8000c8e <I2C_Read_Memory+0xf2>
		/*Disable ACKing*/
		I2C1->CR1 &=~ CR1_ACK;
 8000c4c:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a28      	ldr	r2, [pc, #160]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000c52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c56:	6013      	str	r3, [r2, #0]
		/*Clear ADRR FLAG*/

		/*Generate STOP condition*/
		I2C1->CR1 |= CR1_STOP;
 8000c58:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a25      	ldr	r2, [pc, #148]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c62:	6013      	str	r3, [r2, #0]

		uint16_t dumpy = I2C1->SR1 | I2C1->SR2;
 8000c64:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000c66:	695b      	ldr	r3, [r3, #20]
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	4313      	orrs	r3, r2
 8000c72:	837b      	strh	r3, [r7, #26]
		/*Wait until RXNE is set 1*/
		while(!(I2C1->SR1 & SR1_RXNE));
 8000c74:	bf00      	nop
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f9      	beq.n	8000c76 <I2C_Read_Memory+0xda>

		/*Read the Data*/
		*Data = I2C1->DR;
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	e026      	b.n	8000cdc <I2C_Read_Memory+0x140>
	/*Master want to read more bytes from Slave*/
	else{
		/*Clear the ADDR Flag*/

		/*Read Data until Len = 0*/
		for(uint32_t i = Len; i > 0; i--){
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	61fb      	str	r3, [r7, #28]
 8000c92:	e020      	b.n	8000cd6 <I2C_Read_Memory+0x13a>
			/*Wait until RXNE is set 1*/
			while(!(I2C1->SR1 & SR1_RXNE));
 8000c94:	bf00      	nop
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0f9      	beq.n	8000c96 <I2C_Read_Memory+0xfa>

			/*Last second byte data*/
			if (i == 2){
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d10b      	bne.n	8000cc0 <I2C_Read_Memory+0x124>
				/*Clear ACK bit*/
				I2C1->CR1 &=~ CR1_ACK;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a11      	ldr	r2, [pc, #68]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000cae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cb2:	6013      	str	r3, [r2, #0]

				/*Generate STOP condition*/

				I2C1->CR1 |= CR1_STOP;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6013      	str	r3, [r2, #0]

			}

			/*Read Data from Data Register*/
			*Data = I2C1->DR;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000cc2:	691b      	ldr	r3, [r3, #16]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	701a      	strb	r2, [r3, #0]

			/*Increment the buffer address*/
			Data++;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
		for(uint32_t i = Len; i > 0; i--){
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	61fb      	str	r3, [r7, #28]
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1db      	bne.n	8000c94 <I2C_Read_Memory+0xf8>

		}
	}
	/*Re-enable ACKing */
	I2C1->CR1 |= CR1_ACK;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <I2C_Read_Memory+0x158>)
 8000ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce6:	6013      	str	r3, [r2, #0]

}
 8000ce8:	bf00      	nop
 8000cea:	3724      	adds	r7, #36	; 0x24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	40005400 	.word	0x40005400

08000cf8 <I2C_Write_Memory>:
void I2C_Write_Memory(uint8_t saddr, uint8_t maddr, int n, uint8_t *Data){
 8000cf8:	b480      	push	{r7}
 8000cfa:	b087      	sub	sp, #28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60ba      	str	r2, [r7, #8]
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4603      	mov	r3, r0
 8000d04:	73fb      	strb	r3, [r7, #15]
 8000d06:	460b      	mov	r3, r1
 8000d08:	73bb      	strb	r3, [r7, #14]
	/*Generate Start Condition*/
	I2C1->CR1 |=CR1_START;
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <I2C_Write_Memory+0xbc>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a29      	ldr	r2, [pc, #164]	; (8000db4 <I2C_Write_Memory+0xbc>)
 8000d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d14:	6013      	str	r3, [r2, #0]

	/*Wait start bit generated*/
	while(!(I2C1->SR1 & SR1_SB));
 8000d16:	bf00      	nop
 8000d18:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <I2C_Write_Memory+0xbc>)
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f9      	beq.n	8000d18 <I2C_Write_Memory+0x20>

	/*Sent Slave Address + Write*/
	I2C1->DR = saddr << 1;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	005a      	lsls	r2, r3, #1
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <I2C_Write_Memory+0xbc>)
 8000d2a:	611a      	str	r2, [r3, #16]

	/*Wait ADDR bit set*/
	while(!(I2C1->SR1 & SR1_ADDR));
 8000d2c:	bf00      	nop
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <I2C_Write_Memory+0xbc>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <I2C_Write_Memory+0x36>

	/*NOTE: Clear ADDR bit*/
	uint8_t dumpy = I2C1->SR1 | I2C1->SR2;
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <I2C_Write_Memory+0xbc>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <I2C_Write_Memory+0xbc>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	4313      	orrs	r3, r2
 8000d48:	74fb      	strb	r3, [r7, #19]

	/*Wait Data Transmit Register is empty*/
	while(!(I2C1->SR1 & SR1_TXE));
 8000d4a:	bf00      	nop
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <I2C_Write_Memory+0xbc>)
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d0f9      	beq.n	8000d4c <I2C_Write_Memory+0x54>

	/*Sent Memory Adresss*/
	I2C1->DR = maddr;
 8000d58:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <I2C_Write_Memory+0xbc>)
 8000d5a:	7bbb      	ldrb	r3, [r7, #14]
 8000d5c:	6113      	str	r3, [r2, #16]

	for(int i = 0; i < n; i++){
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	e00f      	b.n	8000d84 <I2C_Write_Memory+0x8c>

		/*Wait Data Transmit Register is empty*/
		while(!(I2C1->SR1 & SR1_TXE));
 8000d64:	bf00      	nop
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <I2C_Write_Memory+0xbc>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f9      	beq.n	8000d66 <I2C_Write_Memory+0x6e>

		/*Send Data */
		I2C1->DR = *Data++;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	1c5a      	adds	r2, r3, #1
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	781a      	ldrb	r2, [r3, #0]
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <I2C_Write_Memory+0xbc>)
 8000d7c:	611a      	str	r2, [r3, #16]
	for(int i = 0; i < n; i++){
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbeb      	blt.n	8000d64 <I2C_Write_Memory+0x6c>

	}
	/*Wait The last byte was sent*/
	while (!(I2C1->SR1 & SR1_BTF));
 8000d8c:	bf00      	nop
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <I2C_Write_Memory+0xbc>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0f9      	beq.n	8000d8e <I2C_Write_Memory+0x96>

	/*Generate Stop condition*/
	I2C1->CR1 |=CR1_STOP;
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <I2C_Write_Memory+0xbc>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <I2C_Write_Memory+0xbc>)
 8000da0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da4:	6013      	str	r3, [r2, #0]
}
 8000da6:	bf00      	nop
 8000da8:	371c      	adds	r7, #28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40005400 	.word	0x40005400

08000db8 <main>:
uint8_t DataMe[1]={0x55};

void MPU6050_Init();
void MPU6050_Read();
int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0


	GPIO_Toggle_Init();
 8000dbc:	f7ff fe32 	bl	8000a24 <GPIO_Toggle_Init>
	I2C_Init();
 8000dc0:	f7ff fe70 	bl	8000aa4 <I2C_Init>
	MPU6050_Init();
 8000dc4:	f000 f822 	bl	8000e0c <MPU6050_Init>
	//I2C_Write_Memory(0x68,0x27,1,&DataMe);
	//I2C_Read_Memory(0x68,0x75,&RX_Buffer);
	while(1){
		SYS_TICK_Delay(500);
 8000dc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dcc:	f000 f8c0 	bl	8000f50 <SYS_TICK_Delay>
		Toggle();
 8000dd0:	f7ff fe46 	bl	8000a60 <Toggle>
		MPU6050_Read();
 8000dd4:	f000 f84a 	bl	8000e6c <MPU6050_Read>
		SYS_TICK_Delay(500);
 8000dd8:	e7f6      	b.n	8000dc8 <main+0x10>
	...

08000ddc <USART2_IRQHandler>:
	}


}
void USART2_IRQHandler(void){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	/*Check which interrupt*/
	if( USART2->SR & (1<<5) ){
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <USART2_IRQHandler+0x28>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0320 	and.w	r3, r3, #32
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <USART2_IRQHandler+0x18>

		UART_Transmit(TX_Buffer,20);
 8000dec:	2114      	movs	r1, #20
 8000dee:	4806      	ldr	r0, [pc, #24]	; (8000e08 <USART2_IRQHandler+0x2c>)
 8000df0:	f000 f8d8 	bl	8000fa4 <UART_Transmit>

		//Toggle();
	}
	/*Clear interrupt flag*/
	USART2->SR &=~ (1<<5);
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <USART2_IRQHandler+0x28>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a02      	ldr	r2, [pc, #8]	; (8000e04 <USART2_IRQHandler+0x28>)
 8000dfa:	f023 0320 	bic.w	r3, r3, #32
 8000dfe:	6013      	str	r3, [r2, #0]


}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40004400 	.word	0x40004400
 8000e08:	20000030 	.word	0x20000030

08000e0c <MPU6050_Init>:

void MPU6050_Init(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
	uint8_t check;
	uint8_t Data;
	I2C_Read_Memory(MPU6050_ADDRESS,WHO_AM_I_REG,1,&check);
 8000e12:	1dbb      	adds	r3, r7, #6
 8000e14:	2201      	movs	r2, #1
 8000e16:	2175      	movs	r1, #117	; 0x75
 8000e18:	2068      	movs	r0, #104	; 0x68
 8000e1a:	f7ff febf 	bl	8000b9c <I2C_Read_Memory>

	if (check == 104){
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	2b68      	cmp	r3, #104	; 0x68
 8000e22:	d11f      	bne.n	8000e64 <MPU6050_Init+0x58>
		Data = 0x00;
 8000e24:	2300      	movs	r3, #0
 8000e26:	71fb      	strb	r3, [r7, #7]
		I2C_Write_Memory(MPU6050_ADDRESS,PWR_MGMT_1_REG,1,Data);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	216b      	movs	r1, #107	; 0x6b
 8000e2e:	2068      	movs	r0, #104	; 0x68
 8000e30:	f7ff ff62 	bl	8000cf8 <I2C_Write_Memory>

		Data = 0x07;
 8000e34:	2307      	movs	r3, #7
 8000e36:	71fb      	strb	r3, [r7, #7]
		I2C_Write_Memory(MPU6050_ADDRESS,SMPLRT_DIV_REG,1,Data);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2119      	movs	r1, #25
 8000e3e:	2068      	movs	r0, #104	; 0x68
 8000e40:	f7ff ff5a 	bl	8000cf8 <I2C_Write_Memory>

		Data = 0x00;
 8000e44:	2300      	movs	r3, #0
 8000e46:	71fb      	strb	r3, [r7, #7]
		I2C_Write_Memory(MPU6050_ADDRESS,ACCEL_CONFIG_REG,1,Data);
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	211c      	movs	r1, #28
 8000e4e:	2068      	movs	r0, #104	; 0x68
 8000e50:	f7ff ff52 	bl	8000cf8 <I2C_Write_Memory>

		Data = 0x00;
 8000e54:	2300      	movs	r3, #0
 8000e56:	71fb      	strb	r3, [r7, #7]
		I2C_Write_Memory(MPU6050_ADDRESS,GYRO_CONFIG_REG,1,Data);
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	211b      	movs	r1, #27
 8000e5e:	2068      	movs	r0, #104	; 0x68
 8000e60:	f7ff ff4a 	bl	8000cf8 <I2C_Write_Memory>

	}
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <MPU6050_Read>:

void MPU6050_Read(){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
	uint8_t RX_Data[6];

	I2C_Read_Memory(MPU6050_ADDRESS,ACCEL_XOUT_H_REG,6,RX_Data);
 8000e72:	463b      	mov	r3, r7
 8000e74:	2206      	movs	r2, #6
 8000e76:	213b      	movs	r1, #59	; 0x3b
 8000e78:	2068      	movs	r0, #104	; 0x68
 8000e7a:	f7ff fe8f 	bl	8000b9c <I2C_Read_Memory>

	Accel_X_Raw = (int16_t) (RX_Data[0] << 8 | RX_Data[1] );
 8000e7e:	783b      	ldrb	r3, [r7, #0]
 8000e80:	021b      	lsls	r3, r3, #8
 8000e82:	b21a      	sxth	r2, r3
 8000e84:	787b      	ldrb	r3, [r7, #1]
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <MPU6050_Read+0xc8>)
 8000e8e:	801a      	strh	r2, [r3, #0]
	Accel_Y_Raw = (int16_t) (RX_Data[2] << 8 | RX_Data[3] );
 8000e90:	78bb      	ldrb	r3, [r7, #2]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	78fb      	ldrb	r3, [r7, #3]
 8000e98:	b21b      	sxth	r3, r3
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b21a      	sxth	r2, r3
 8000e9e:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <MPU6050_Read+0xcc>)
 8000ea0:	801a      	strh	r2, [r3, #0]
	Accel_Z_Raw = (int16_t) (RX_Data[4] << 8 | RX_Data[5] );
 8000ea2:	793b      	ldrb	r3, [r7, #4]
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	797b      	ldrb	r3, [r7, #5]
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	4313      	orrs	r3, r2
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <MPU6050_Read+0xd0>)
 8000eb2:	801a      	strh	r2, [r3, #0]

	Ax = Accel_X_Raw /16384.0;
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <MPU6050_Read+0xc8>)
 8000eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fae6 	bl	800048c <__aeabi_i2d>
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <MPU6050_Read+0xd4>)
 8000ec6:	f7ff fc75 	bl	80007b4 <__aeabi_ddiv>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4610      	mov	r0, r2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f7ff fd57 	bl	8000984 <__aeabi_d2f>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a1a      	ldr	r2, [pc, #104]	; (8000f44 <MPU6050_Read+0xd8>)
 8000eda:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_Raw /16384.0;
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MPU6050_Read+0xcc>)
 8000ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fad2 	bl	800048c <__aeabi_i2d>
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MPU6050_Read+0xd4>)
 8000eee:	f7ff fc61 	bl	80007b4 <__aeabi_ddiv>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fd43 	bl	8000984 <__aeabi_d2f>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a11      	ldr	r2, [pc, #68]	; (8000f48 <MPU6050_Read+0xdc>)
 8000f02:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_Raw /16384.0;
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <MPU6050_Read+0xd0>)
 8000f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fabe 	bl	800048c <__aeabi_i2d>
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <MPU6050_Read+0xd4>)
 8000f16:	f7ff fc4d 	bl	80007b4 <__aeabi_ddiv>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	f7ff fd2f 	bl	8000984 <__aeabi_d2f>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a08      	ldr	r2, [pc, #32]	; (8000f4c <MPU6050_Read+0xe0>)
 8000f2a:	6013      	str	r3, [r2, #0]


}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2000001c 	.word	0x2000001c
 8000f38:	2000001e 	.word	0x2000001e
 8000f3c:	20000020 	.word	0x20000020
 8000f40:	40d00000 	.word	0x40d00000
 8000f44:	20000024 	.word	0x20000024
 8000f48:	20000028 	.word	0x20000028
 8000f4c:	2000002c 	.word	0x2000002c

08000f50 <SYS_TICK_Delay>:
#define SYSTICK_LOAD_VALUE		16000
#define CTRL_ENABLE				(1U<<0)
#define CTRL_CLKSRC				(1U<<2)
#define	CTRL_COUNTFLAG			(1U<<16)

void SYS_TICK_Delay(int ms){
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	/*Reaload with number of clocks per millisecond*/
	SysTick->LOAD = SYSTICK_LOAD_VALUE;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <SYS_TICK_Delay+0x50>)
 8000f5a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000f5e:	605a      	str	r2, [r3, #4]

	/*Clear systick current value register*/
	SysTick->VAL = 0;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <SYS_TICK_Delay+0x50>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]

	/*Enable systick and select internal clock source*/
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <SYS_TICK_Delay+0x50>)
 8000f68:	2205      	movs	r2, #5
 8000f6a:	601a      	str	r2, [r3, #0]

	for(int i = 0;i < ms; i++){
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	e009      	b.n	8000f86 <SYS_TICK_Delay+0x36>
		/*Wait until the countflag is set*/

		while( (SysTick->CTRL & CTRL_COUNTFLAG) == 0 ){}
 8000f72:	bf00      	nop
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <SYS_TICK_Delay+0x50>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0f9      	beq.n	8000f74 <SYS_TICK_Delay+0x24>
	for(int i = 0;i < ms; i++){
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	3301      	adds	r3, #1
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	dbf1      	blt.n	8000f72 <SYS_TICK_Delay+0x22>
	}
	SysTick->CTRL = 0;
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SYS_TICK_Delay+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <UART_Transmit>:
	NVIC->ISER[1] |= 1 << (USART2_IRQn % 32);
	//NVIC_EnableIRQ(USART2_IRQn);
}


void UART_Transmit( uint8_t *TX_Data, uint8_t TX_Size){
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]
	while( i < TX_Size){
 8000fb4:	e010      	b.n	8000fd8 <UART_Transmit+0x34>
		/* Check Transmit Data Register Empty*/
		while(!(USART2->SR& (1<<7))){}
 8000fb6:	bf00      	nop
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <UART_Transmit+0x58>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0f9      	beq.n	8000fb8 <UART_Transmit+0x14>
		/* Send data */
		USART2->DR=(uint8_t)(*TX_Data & 0xFF);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	781a      	ldrb	r2, [r3, #0]
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <UART_Transmit+0x58>)
 8000fca:	605a      	str	r2, [r3, #4]
		TX_Data++;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
		i++;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
	while( i < TX_Size){
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	78fb      	ldrb	r3, [r7, #3]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d3ea      	bcc.n	8000fb6 <UART_Transmit+0x12>
	}
	/*Waiting transmit complete*/
	while(!(USART2->SR &(1<<6))){}
 8000fe0:	bf00      	nop
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <UART_Transmit+0x58>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f9      	beq.n	8000fe2 <UART_Transmit+0x3e>
}
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	40004400 	.word	0x40004400

08001000 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001002:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001004:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <LoopForever+0x6>)
  ldr r1, =_edata
 800100a:	490d      	ldr	r1, [pc, #52]	; (8001040 <LoopForever+0xa>)
  ldr r2, =_sidata
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <LoopForever+0xe>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001020:	4c0a      	ldr	r4, [pc, #40]	; (800104c <LoopForever+0x16>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800102e:	f000 f811 	bl	8001054 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001032:	f7ff fec1 	bl	8000db8 <main>

08001036 <LoopForever>:

LoopForever:
  b LoopForever
 8001036:	e7fe      	b.n	8001036 <LoopForever>
  ldr   r0, =_estack
 8001038:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001044:	080010bc 	.word	0x080010bc
  ldr r2, =_sbss
 8001048:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800104c:	20000044 	.word	0x20000044

08001050 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC_IRQHandler>
	...

08001054 <__libc_init_array>:
 8001054:	b570      	push	{r4, r5, r6, lr}
 8001056:	4d0d      	ldr	r5, [pc, #52]	; (800108c <__libc_init_array+0x38>)
 8001058:	4c0d      	ldr	r4, [pc, #52]	; (8001090 <__libc_init_array+0x3c>)
 800105a:	1b64      	subs	r4, r4, r5
 800105c:	10a4      	asrs	r4, r4, #2
 800105e:	2600      	movs	r6, #0
 8001060:	42a6      	cmp	r6, r4
 8001062:	d109      	bne.n	8001078 <__libc_init_array+0x24>
 8001064:	4d0b      	ldr	r5, [pc, #44]	; (8001094 <__libc_init_array+0x40>)
 8001066:	4c0c      	ldr	r4, [pc, #48]	; (8001098 <__libc_init_array+0x44>)
 8001068:	f000 f818 	bl	800109c <_init>
 800106c:	1b64      	subs	r4, r4, r5
 800106e:	10a4      	asrs	r4, r4, #2
 8001070:	2600      	movs	r6, #0
 8001072:	42a6      	cmp	r6, r4
 8001074:	d105      	bne.n	8001082 <__libc_init_array+0x2e>
 8001076:	bd70      	pop	{r4, r5, r6, pc}
 8001078:	f855 3b04 	ldr.w	r3, [r5], #4
 800107c:	4798      	blx	r3
 800107e:	3601      	adds	r6, #1
 8001080:	e7ee      	b.n	8001060 <__libc_init_array+0xc>
 8001082:	f855 3b04 	ldr.w	r3, [r5], #4
 8001086:	4798      	blx	r3
 8001088:	3601      	adds	r6, #1
 800108a:	e7f2      	b.n	8001072 <__libc_init_array+0x1e>
 800108c:	080010b4 	.word	0x080010b4
 8001090:	080010b4 	.word	0x080010b4
 8001094:	080010b4 	.word	0x080010b4
 8001098:	080010b8 	.word	0x080010b8

0800109c <_init>:
 800109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800109e:	bf00      	nop
 80010a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010a2:	bc08      	pop	{r3}
 80010a4:	469e      	mov	lr, r3
 80010a6:	4770      	bx	lr

080010a8 <_fini>:
 80010a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010aa:	bf00      	nop
 80010ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ae:	bc08      	pop	{r3}
 80010b0:	469e      	mov	lr, r3
 80010b2:	4770      	bx	lr
